import{o as n,c as a,a as s}from"./app.5358fee8.js";const t='{"title":"Proxied Promise Chain","description":"","frontmatter":{},"headers":[{"level":2,"title":"Commands","slug":"commands"},{"level":2,"title":"Assertions","slug":"assertions"},{"level":2,"title":"Chain branches","slug":"chain-branches"},{"level":2,"title":"Benefits from using chains","slug":"benefits-from-using-chains"},{"level":2,"title":"How does it work?","slug":"how-does-it-work"}],"relativePath":"guide/proxied-promise-chain.md","lastUpdated":1616168269868}',e={},p=s('<h1 id="proxied-promise-chain"><a class="header-anchor" href="#proxied-promise-chain" aria-hidden="true">#</a> Proxied Promise Chain</h1><p><strong>Commands</strong> and <strong>assertions</strong> in <em>tuiv</em> are issued in a chain.</p><h2 id="commands"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h2><p><em>tuiv</em> is based on playwright, here&#39;s what commands look like without a chain:</p><div class="language-js"><pre><code><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">&#39;.selector&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> element<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> element<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>For single commands, we do not need a variable, but we still would need multiple awaits:</p><div class="language-js"><pre><code><span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForSelector</span><span class="token punctuation">(</span><span class="token string">&#39;.selector&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>With chains, we can get rid of multiple awaits and local variables and write our commands like this:</p><div class="language-js"><pre><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.selector&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="assertions"><a class="header-anchor" href="#assertions" aria-hidden="true">#</a> Assertions</h2><p>Playwright comes with <code>expect</code> style assertions:</p><div class="language-js"><pre><code><span class="token keyword">const</span> alt <span class="token operator">=</span> <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alt&#39;</span><span class="token punctuation">)</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>with chains, we can lean even more into natural language looking assertions:</p><div class="language-js"><pre><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>have<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;alt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equaling</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>You can go over board with the natural-ish language as much as you like:</p><div class="language-js"><pre><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span>have<span class="token punctuation">.</span>an<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">&#39;alt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>which<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>Or not at all:</p><div class="language-js"><pre><code><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;alt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>The biggest difference between <em>tuiv</em>s assertions and playwrights though is retryability. <em>tuiv</em> will retry the whole chain, including re-fetching the attribute content and assert until the timeout is reached.</p><h2 id="chain-branches"><a class="header-anchor" href="#chain-branches" aria-hidden="true">#</a> Chain branches</h2><p><em>tuiv</em>s chains are branchable, so you don&#39;t need to hold back with any variables at all.</p><div class="language-js"><pre><code><span class="token keyword">const</span> root <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;.my-root&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> root<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.some-child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> root<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.some-other-child&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>Each chain will resolve on promise <code>await</code>.</p><h2 id="benefits-from-using-chains"><a class="header-anchor" href="#benefits-from-using-chains" aria-hidden="true">#</a> Benefits from using chains</h2><ul><li>cleaner api</li><li>less local variables and awaiting</li><li>retry-ability</li></ul><h2 id="how-does-it-work"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h2><p>Each chain starts at the <code>page</code> object, which is a playwright <a href="https://playwright.dev/docs/api/class-page" target="_blank" rel="noopener noreferrer">Page</a> wrapped in a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener noreferrer">Proxy</a>. Each call on the page in turn returns another proxy, which records all property accesses and function calls. Finally, the whole chain gets resolved at once when calling <code>then</code> at the end of the chain, which is what <code>await</code> does for us.</p>',27);e.render=function(s,t,e,o,c,i){return n(),a("div",null,[p])};export default e;export{t as __pageData};
